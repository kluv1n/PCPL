class Student:
    def __init__(self, student_id, last_name, grade, group_id):
        self.student_id = student_id
        self.last_name = last_name
        self.grade = grade
        self.group_id = group_id


class StudentGroup:
    def __init__(self, group_id, group_name):
        self.group_id = group_id
        self.group_name = group_name


class Course:
    def __init__(self, course_id, course_name):
        self.course_id = course_id
        self.course_name = course_name


class Enrollment:
    def __init__(self, student_id, course_id):
        self.student_id = student_id
        self.course_id = course_id


def get_groups_with_a_students(groups, students):
    """Возвращает список групп, название которых начинается с 'А', и их студентов."""
    return [
        (group.group_name, [student.last_name for student in students if student.group_id == group.group_id])
        for group in groups if group.group_name.startswith("Группа А")
    ]


def get_groups_with_max_grade(groups, students):
    """Возвращает список групп с максимальной оценкой студентов, отсортированный по убыванию."""
    return sorted(
        [
            (group.group_name, max((student.grade for student in students if student.group_id == group.group_id), default=0))
            for group in groups
        ],
        key=lambda x: x[1], reverse=True
    )


def get_sorted_enrollments(enrollments, students, courses):
    """Возвращает список всех связанных студентов и курсов, отсортированный по курсам."""
    return sorted(
        [
            (
                next(student.last_name for student in students if student.student_id == enrollment.student_id),
                next(course.course_name for course in courses if course.course_id == enrollment.course_id)
            )
            for enrollment in enrollments
        ],
        key=lambda x: x[1]
    )


---------------------------------------------------------------

import unittest
from program import Student, StudentGroup, Course, Enrollment, get_groups_with_a_students, get_groups_with_max_grade, get_sorted_enrollments


class TestProgram(unittest.TestCase):
    def setUp(self):
        self.students = [
            Student(1, "Иванов", 85, 101),
            Student(2, "Петров", 90, 101),
            Student(3, "Сидоров", 78, 102),
            Student(4, "Смирнов", 88, 102),
            Student(5, "Козлов", 92, 103),
        ]

        self.groups = [
            StudentGroup(101, "Группа А"),
            StudentGroup(102, "Группа Б"),
            StudentGroup(103, "Группа В"),
        ]

        self.courses = [
            Course(201, "Математика"),
            Course(202, "Информатика"),
            Course(203, "Физика"),
        ]

        self.enrollments = [
            Enrollment(1, 201),
            Enrollment(1, 202),
            Enrollment(2, 202),
            Enrollment(3, 203),
            Enrollment(4, 201),
            Enrollment(5, 203),
        ]

    def test_get_groups_with_a_students(self):
        result = get_groups_with_a_students(self.groups, self.students)
        expected = [("Группа А", ["Иванов", "Петров"])]
        self.assertEqual(result, expected)

    def test_get_groups_with_max_grade(self):
        result = get_groups_with_max_grade(self.groups, self.students)
        expected = [("Группа В", 92), ("Группа А", 90), ("Группа Б", 88)]
        self.assertEqual(result, expected)

    def test_get_sorted_enrollments(self):
        result = get_sorted_enrollments(self.enrollments, self.students, self.courses)
        expected = [
            ("Иванов", "Информатика"),
            ("Петров", "Информатика"),
            ("Смирнов", "Математика"),
            ("Иванов", "Математика"),
            ("Сидоров", "Физика"),
            ("Козлов", "Физика"),
        ]
        self.assertEqual(result, expected)


if __name__ == "__main__":
    unittest.main()
